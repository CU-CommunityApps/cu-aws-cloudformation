AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Shib role for specifically tagged resource access.
Metadata:
  Source: https://github.com/CU-CommunityApps/cu-aws-cloudformation/blob/main/shib-tagged/shib-tagged.yml
  Version: "1.1.0"
  RecommendedStackName: shib-$TagValue
  ChangeLog:
    "1.1.0":
      - Rectify template with reality of shib-datawarehouse deployed in cu-odaa
      - remove ecr:Create* without conditions
      - add dms:ModifyEndpoint
      - put conditional DMS actions in alpha order
      - add support privs
      - rename inline policies to ensure that a CloudFormation update will force policys to match the template
    "1.0.0":
      - First versioned release
      - Expand KMS privs to allow access to default AWS keys (alias: aws/*)
      - Reduce KMS:Create* privs to KMS:CreateKey priv
      - Expand general KMS privs to allow Get*, List*, Decribe*
      - Add tags to role
Parameters:
  TagKey:
    Description: Tag key to match between IAM role and resources (ie. eds:team)
    Type: String
  TagValue:
    Description: Tag value name (ie. analytics)
    Type: String
  S3Access:
    Description: Access to S3 Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  EC2Access:
    Description: Limited Access to EC2 Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  EC2FullAccess:
    Description: Full Access to EC2 Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  ECRAccess:
    Description: Access to ECR Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  DMSAccess:
    Description: Access to DMS Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  SQSAccess:
    Description: Access to SQS Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  ECSAccess:
    Description: Access to ECS Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  GlueAccess:
    Description: Access to Glue Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  SageMakerFullAccess:
    Description: Full Access to SageMaker Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  CloudformationAccess:
    Description: Access to Cloudformation Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  LambdaAccess:
    Description: Access to Lambda Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  SecretsManagerAccess:
    Description: Access to Secrets Manager Resources?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  KMSAccess:
    Description: Access to Key Management Services?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  RedShiftAccess:
    Description: Access to RedShift Services?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  CloudShellAccess:
    Description: Access to Cloud Shell?
    Default: 'no'
    Type: String
    AllowedValues: ['yes', 'no']
  BucketNamePrefix:
    Description: S3 bucket name prefix to grant access to (if applicable)
    Type: String
  BucketNamePrefix2:
    Description: S3 bucket name prefix to grant access to (if applicable)
    Type: String
  LambdaNamePrefix:
    Description: Lambda function name prefix to grant access to (if applicable)
    Type: String
  VersionParam:
    Description: CIT template version
    Type: String
  ContactEmailParam:
    Description: CIT contact email tag value version
    Default: cloud-support@cornell.edu
    Type: String
  SourceURLParam:
    Description: URL of this template in source code repository (not necessarily public)
    Default: https://github.com/CU-CommunityApps/cu-aws-cloudformation/blob/main/shib-tagged/shib-tagged.yml
    Type: String
  DocumentationURLParam:
    Description: URL of documentation about this deployment or these resources
    Default: https://confluence.cornell.edu/display/CLOUD/AWS+Tagging+and+IAM+Policies
    Type: String

Conditions:
  CreateS3: !Equals [ !Ref S3Access, 'yes' ]
  CreateEC2: !Equals [ !Ref EC2Access, 'yes' ]
  CreateEC2Full: !Equals [ !Ref EC2FullAccess, 'yes' ]
  CreateDMS: !Equals [ !Ref DMSAccess, 'yes' ]
  CreateSQS: !Equals [ !Ref SQSAccess, 'yes' ]
  CreateECS: !Equals [ !Ref ECSAccess, 'yes' ]
  CreateECR: !Equals [ !Ref ECRAccess, 'yes' ]
  CreateGlue: !Equals [ !Ref GlueAccess, 'yes' ]
  CreateRedShift: !Equals [ !Ref RedShiftAccess, 'yes' ]
  CreateKMS: !Equals [ !Ref KMSAccess, 'yes' ]
  CreateCloudShell: !Equals [ !Ref CloudShellAccess, 'yes' ]
  CreateSageMakerFull: !Equals [ !Ref SageMakerFullAccess, 'yes' ]
  CreateCloudformation: !Equals [ !Ref CloudformationAccess, 'yes' ]
  CreateLambda: !Equals [ !Ref LambdaAccess, 'yes' ]
  CreateSecretsManager: !Equals [ !Ref SecretsManagerAccess, 'yes' ]
  NoBucket2: !Equals [ !Ref BucketNamePrefix2, '' ]

Resources:
  TagBasedResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Join [ '-', [ 'tagged', !Ref TagValue ] ]
      Description: !Sub "A group that is based on a tag query - ${TagValue}"
      ResourceQuery:
        Type:
          "TAG_FILTERS_1_0" 
        Query:
          ResourceTypeFilters: 
            - "AWS::AllSupported" 
          TagFilters:
            - 
              Key: !Ref TagKey
              Values: 
                - !Ref TagValue

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ 'shib', !Ref TagValue ] ]
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Description
          Value: !Sub "This role supports tag-based access to resources"
        - Key: Documentation
          Value: !Ref DocumentationURLParam
        - Key: cit:contact-email
          Value: !Ref ContactEmailParam
        - Key: cit:version
          Value: !Ref VersionParam
        - Key: cit:source
          Value:  !Ref SourceURLParam
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Federated: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:saml-provider/cornell_idp"
            Action: sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                SAML:aud: https://signin.aws.amazon.com/saml

  ResourceGroupPolicy:
    DependsOn: TagBasedResourceGroup
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline', 'resource', 'groups', !Ref TagValue ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 
              - 'tag:*'
              - 'resource-groups:ListGroups'
            Resource: '*'
          - 
            Effect: Allow
            Action: 
              - 'resource-groups:List*'
              - 'resource-groups:Get*'
              - 'resource-groups:SearchResources'
            Resource: !GetAtt TagBasedResourceGroup.Arn
      Roles:
        - !Ref IAMRole

  CloudShellPolicy:
    Condition: CreateCloudShell
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-cloudshell', !Ref TagValue ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'cloudshell:*'
            Resource: '*'
      Roles:
        - !Ref IAMRole

  S3Policy:
    Condition: CreateS3
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-s3', !Ref TagValue ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 's3:*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${BucketNamePrefix}*'
              - !Sub 'arn:${AWS::Partition}:s3:::${BucketNamePrefix}*/*'
              - !If [ NoBucket2, !Ref 'AWS::NoValue', !Sub 'arn:${AWS::Partition}:s3:::${BucketNamePrefix2}*' ]
              - !If [ NoBucket2, !Ref 'AWS::NoValue', !Sub 'arn:${AWS::Partition}:s3:::${BucketNamePrefix2}*/*' ]
          -
            Effect: Allow
            Action: 's3:ListAllMyBuckets'
            Resource: '*'
          - 
            Effect: Deny
            Action: 's3:PutBucketTagging'
            Resource: '*'
      Roles:
        - !Ref IAMRole

  ECRPolicy:
    Condition: CreateECR
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-ecr', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecr:List*",
                            "ecr:Describe*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecr:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
      Roles:
        - !Ref IAMRole

  EC2Policy:
    Condition: CreateEC2
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-ec2', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:DescribeInstances"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:StartInstances",
                            "ec2:StopInstances"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Effect": "Deny",
                        "Action": [
                            "ec2:CreateTags",
                            "ec2:DeleteTags"
                        ],
                        "Resource": "*"
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
      Roles:
        - !Ref IAMRole

  EC2FullPolicy:
    Condition: CreateEC2Full
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-ec2-full', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudwatch:*",
                            "ec2:*",
                            "compute-optimizer:GetEnrollmentStatus",
                            "elasticloadbalancing:*",
                            "ebs:*",
                            "autoscaling:*",
                            "iam:ListInstanceProfiles"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": "iam:CreateServiceLinkedRole",
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "iam:AWSServiceName": [
                                    "autoscaling.amazonaws.com",
                                    "ec2scheduled.amazonaws.com",
                                    "elasticloadbalancing.amazonaws.com",
                                    "spot.amazonaws.com",
                                    "spotfleet.amazonaws.com",
                                    "transitgateway.amazonaws.com"
                                ]
                            }
                        }
                    },
                    {
                        "Effect": "Deny",
                        "Action": "ec2:*",
                        "Resource": "arn:aws:ec2:*:*:instance/*",
                        "Condition": {
                            "ForAllValues:StringNotEquals": {
                                "${key}": "${value}"
                            },
                            "ForAllValues:StringNotLike": {
                                "${key2}": "${value2}"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
      Roles:
        - !Ref IAMRole

  KMSPolicy:
    Condition: CreateKMS
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-kms', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "kms:Describe*",
                            "kms:Get*",
                            "kms:List*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "kms:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Effect": "Deny",
                        "Action": "kms:Createkey",
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": "${value2}"
                            }
                        }
                    },
                    {
                        "Sid": "AllowUseOfAwsDefaultKeys",
                        "Effect": "Allow",
                        "Action": [
                            "kms:*"
                        ],
                        "Resource": [
                            "*"
                        ],
                        "Condition": {
                            "ForAnyValue:StringLike": {
                                "kms:ResourceAliases": "alias/aws/*"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
      Roles:
        - !Ref IAMRole

  SecretsManagerPolicy:
    Condition: CreateSecretsManager
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-secrets', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "secretsmanager:ListSecrets"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "secretsmanager:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Effect": "Deny",
                        "Action": "secretsmanager:CreateSecret",
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": "${value2}"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
      Roles:
        - !Ref IAMRole

  SageMakerFullPolicy:
    Condition: CreateSageMakerFull
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-sagemaker-full', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:PassRole",
                            "iam:CreateServiceLinkedRole",
                            "sagemaker:Create*",
                            "sagemaker:List*",
                            "kms:ListAliases",
                            "iam:ListRoles"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": "s3:CreateBucket",
                        "Resource": "arn:aws:s3:::sagemaker-studio-${account}-*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "sagemaker:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Sid": "DenySageMakerWithoutTags",
                        "Effect": "Deny",
                        "Action": [
                            "sagemaker:CreateAction",
                            "sagemaker:CreateAlgorithm",
                            "sagemaker:CreateEdgePackagingJob",
                            "sagemaker:CreateEndpoint",
                            "sagemaker:CreateEndpointConfig",
                            "sagemaker:CreateExperiment",
                            "sagemaker:CreateFeatureGroup",
                            "sagemaker:CreateFlowDefinition",
                            "sagemaker:CreateHumanTaskUi",
                            "sagemaker:CreateHyperParameterTuningJob",
                            "sagemaker:CreateImage",
                            "sagemaker:CreateImageVersion",
                            "sagemaker:CreateInferenceRecommendationsJob",
                            "sagemaker:CreateLabelingJob",
                            "sagemaker:CreateLineageGroupPolicy",
                            "sagemaker:CreateModel",
                            "sagemaker:CreateModelBiasJobDefinition",
                            "sagemaker:CreateModelExplainabilityJobDefinition",
                            "sagemaker:CreateModelPackage",
                            "sagemaker:CreateModelPackageGroup",
                            "sagemaker:CreateModelQualityJobDefinition",
                            "sagemaker:CreateMonitoringSchedule",
                            "sagemaker:CreateNotebookInstance",
                            "sagemaker:CreateNotebookInstanceLifecycleConfig",
                            "sagemaker:CreatePipeline",
                            "sagemaker:CreateProcessingJob",
                            "sagemaker:CreateProject",
                            "sagemaker:CreateStudioLifecycleConfig",
                            "sagemaker:CreateTrainingJob",
                            "sagemaker:CreateTransformJob",
                            "sagemaker:CreateTrial",
                            "sagemaker:CreateTrialComponent",
                            "sagemaker:CreateUserProfile"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": [
                                    "${value2}"
                                ]
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
            account: !Ref 'AWS::AccountId'
      Roles:
        - !Ref IAMRole

  DMSPolicy:
    Condition: CreateDMS
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-dms', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Action": [
                            "dms:Describe*"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Sid": "DenyDMSWithoutTags",
                        "Effect": "Deny",
                        "Action": [
                            "dms:Create*",
                            "dms:AddTagsToResource"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": [
                                    "${value2}"
                                ]
                            }
                        }
                    },
                    {
                        "Action": [
                            "dms:Create*",
                            "dms:AddTagsToResource"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "dms:DeleteConnection",
                            "dms:DeleteEndpoint",
                            "dms:DeleteReplicationInstance",
                            "dms:DeleteReplicationTask",
                            "dms:DescribeApplicableIndividualAssessments",
                            "dms:DescribeReplicationInstanceTaskLogs",
                            "dms:DescribeReplicationTaskAssessmentResults",
                            "dms:DescribeReplicationTaskAssessmentRuns",
                            "dms:DescribeReplicationTaskIndividualAssessments",
                            "dms:DescribeTableStatistics",
                            "dms:ListTagsForResource",
                            "dms:ModifyEndpoint",
                            "dms:ModifyReplicationInstance",
                            "dms:ModifyReplicationTask",
                            "dms:ReloadTables",
                            "dms:RemoveTagsFromResource",
                            "dms:StartReplicationTask",
                            "dms:StartReplicationTaskAssessment",
                            "dms:StartReplicationTaskAssessmentRun",
                            "dms:StopReplicationTask",
                            "dms:TestConnection"
                        ],
                        "Resource": [
                            "arn:aws:dms:*:${account}:*"
                        ],
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        },
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "kms:ListAliases",
                            "kms:DescribeKey"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "iam:PassRole",
                            "iam:Get*",
                            "iam:List*"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "ec2:DescribeVpcs",
                            "ec2:DescribeInternetGateways",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    },
                    {
                        "Action": [
                            "cloudwatch:Get*",
                            "cloudwatch:List*",
                            "cloudwatch:Describe*",
                            "logs:Get*",
                            "logs:List*",
                            "logs:Describe*",
                            "logs:StartQuery",
                            "logs:StopQuery",
                            "logs:PutQueryDefinition",
                            "logs:FilterLogEvents"
                        ],
                        "Resource": "*",
                        "Effect": "Allow"
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
            account: !Ref 'AWS::AccountId'
      Roles:
        - !Ref IAMRole

  CloudformationPolicy:
    Condition: CreateCloudformation
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-cloudformation', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudformation:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudformation:ListStacks"
                        ],
                        "Resource": "*"
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
      Roles:
        - !Ref IAMRole

  LambdaPolicy:
    Condition: CreateLambda
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-lambda', !Ref TagValue ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'lambda:*'
            Resource:
              - !Sub 'arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:${LambdaNamePrefix}*'
              - !Sub 'arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:layer:${LambdaNamePrefix}*'
          -
            Effect: Allow
            Action: 
              - 'lambda:ListFunctions'
              - 'lambda:GetAccountSettings'
              - 'lambda:ListLayerVersions'
              - 'lambda:ListLayers'
              - 'lambda:GetLayerVersion'
            Resource: '*'
          - 
            Effect: Allow
            Action: 'iam:CreatePolicy'
            Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*AWSLambdaBasicExecutionRole-*'
          - 
            Effect: Allow
            Action: 
              - 'iam:CreateRole'
              - 'iam:AttachRolePolicy'
              - 'iam:PassRole'
            Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/*'
      Roles:
        - !Ref IAMRole       

  SQSPolicy:
    Condition: CreateSQS
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-sqs', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "sqs:*"
                        ],
                        "Resource": "*"
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
      Roles:
        - !Ref IAMRole

  ECSPolicy:
    Condition: CreateECS
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-ecs', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecs:List*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecs:Create*",
                            "ecs:TagResource"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "DenyECSWithoutTags",
                        "Effect": "Deny",
                        "Action": [
                            "ecs:Create*",
                            "ecs:TagResource"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": [
                                    "${value2}"
                                ]
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ecs:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudwatch:GetMetricStatistics"
                        ],
                        "Resource": "*"
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
            key2: !Sub 'aws:RequestTag/${TagKey}'
            value2: !Ref TagValue
      Roles:
        - !Ref IAMRole

  GluePolicy:
    Condition: CreateGlue
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-glue', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "glue:*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "glue:CreateConnection", 
                            "glue:UpdateConnection", 
                            "glue:GetConnection",
                            "glue:DeleteConnection"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
      Roles:
        - !Ref IAMRole

  SupportPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'inline-support', !Ref TagValue ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'support:*'
            Resource: '*'
      Roles:
        - !Ref IAMRole


  RedShiftPolicy:
    Condition: CreateRedShift
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join [ '-', [ 'redshift', !Ref TagValue ] ]
      PolicyDocument:
        !Sub 
          - |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "redshift:Describe*",
                            "redshift:View*",
                            "redshift:List*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "redshift:Create*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "DenyWithoutTags",
                        "Effect": "Deny",
                        "Action": [
                            "redshift:Create*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAllValues:StringNotLike": {
                                "${key2}": [
                                    "${value2}"
                                ]
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "redshift:*"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "${key}": "${value}"
                            }
                        }
                    }
                ]
            }
          -
            key: !Sub 'aws:ResourceTag/${TagKey}'
            value: !Join [ '', [ !Join [ '/', [ '${aws:PrincipalTag', !Ref TagKey ] ], '}' ] ]
      Roles:
        - !Ref IAMRole