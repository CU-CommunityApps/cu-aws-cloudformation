AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Create Client VPN connected to AWS Directory
Parameters:

  VPCParam:
    Description: The VPC into which the Client VPN endpoint will be deployed
    Type: AWS::EC2::VPC::Id

  VPCSubnetParam:
    Description: A subnet in the VPC to which the Client VPN endpoint will be deployed
    Type: AWS::EC2::Subnet::Id

  ClientVPNCIDRParam:
    Description: The IP address range (CIDR block) assigned to clients connected to the VPN. Use the default unless it overlaps with the CIDR block for VPCParam.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.32.0.0/22
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    
  DirectoryIdParam:
    Description: The ID of the AWS Directory to use for authentication. Format is d-XXXXXXXXXX.
    Type: String

  DirectorySecurityGroupParam:
    Description: The security group assigned to the directory and which needs to be added to the Client VPN endpoint deployment so the VPN endpoint can access the directory
    Type: AWS::EC2::SecurityGroup::Id

  ServerCertificateParam:
    Description: The ARN of a server certificate stored in AWS Certificate Manager
    Type: String

  RoutingTypeParam:
    Description: Which routes should be enabled for VPN client connections?
    Type: String
    Default: none
    AllowedValues:
      - campus-public
      - campus-private
      - none
      
  PeeredVPCCIDRParam:
    Description: (OPTIONAL) CIDR block of VPC peered to VPC in which Client VPN is deployed
    Type: String
    Default: ""

Mappings: {}
Outputs: {}
Conditions:
  RoutePublic: !Equals [ !Ref RoutingTypeParam, "campus-public"]
  RoutePrivate: !Equals [ !Ref RoutingTypeParam, "campus-private"]
  RoutePeered: !Not [ !Equals [ !Ref PeeredVPCCIDRParam, ""] ]
Resources:
  
  ClientVPN:
    Type: AWS::EC2::ClientVpnEndpoint
    DependsOn:
      - LogGroupStream
    Properties: 
      AuthenticationOptions: 
        -   ActiveDirectory: 
              DirectoryId: !Ref DirectoryIdParam
            # MutualAuthentication: 
            #   CertificateAuthenticationRequest
            Type: directory-service-authentication
      ClientCidrBlock: !Ref ClientVPNCIDRParam
      ConnectionLogOptions: 
        CloudwatchLogGroup: !Ref LogGroup
        CloudwatchLogStream: connections
        Enabled: true
      Description: This Client VPN is authenticates users with a directory
      # DnsServers: 
      #   - String
      SecurityGroupIds: 
        - !Ref DirectorySecurityGroupParam
      ServerCertificateArn: !Ref ServerCertificateParam
      SplitTunnel: true
      TagSpecifications: 
        - ResourceType: client-vpn-endpoint
          Tags: 
            - Key: Source Template
              Value: https://github.com/CU-CommunityApps/cu-aws-cloudformation/client-vpn
            - Key: Name
              Value: demo-client-vpn
      TransportProtocol: udp # "tcp" or "udp"; default is "udp"
      VpcId: !Ref VPCParam
      VpnPort: 443

  ClientVPNAssociation:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      SubnetId: !Ref VPCSubnetParam

  NetworkAuthPeered:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Condition: RoutePeered
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to peered VPC
      TargetNetworkCidr: !Ref PeeredVPCCIDRParam

  NetworkAuth10Space:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to entire private campus network
      TargetNetworkCidr: 10.0.0.0/8

  NetworkAuth12884:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 128.84.0.0/16 network
      TargetNetworkCidr: 128.84.0.0/16

  NetworkAuth128253:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 128.253.0.0/16 network
      TargetNetworkCidr: 128.253.0.0/16

  NetworkAuth132236:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 132.236.0.0/16 network
      TargetNetworkCidr: 132.236.0.0/16

  NetworkAuth19235:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 192.35.82.0/24 network
      TargetNetworkCidr: 192.35.82.0/24

  NetworkAuth192122235:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 192.122.235.0/24 network
      TargetNetworkCidr: 192.122.235.0/24

  NetworkAuth192122236:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties: 
      # AccessGroupId: String
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Allow access to public campus 192.122.236.0/24 network
      TargetNetworkCidr: 192.122.236.0/24

  RoutePeered:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePeered
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to peered VPC
      DestinationCidrBlock: !Ref PeeredVPCCIDRParam
      TargetVpcSubnetId:  !Ref VPCSubnetParam

  Route12884:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 128.84.0.0/16 network
      DestinationCidrBlock: 128.84.0.0/16
      TargetVpcSubnetId:  !Ref VPCSubnetParam

  Route128253:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 128.253.0.0/16 network
      DestinationCidrBlock: 128.253.0.0/16
      TargetVpcSubnetId:  !Ref VPCSubnetParam

  Route132236:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 132.236.0.0/16 network
      DestinationCidrBlock: 132.236.0.0/16
      TargetVpcSubnetId:  !Ref VPCSubnetParam

  Route19235:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 192.35.82.0/24 network
      DestinationCidrBlock: 192.35.82.0/24
      TargetVpcSubnetId:  !Ref VPCSubnetParam
      
  Route192122235:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 192.122.235.0/24 network
      DestinationCidrBlock: 192.122.235.0/24
      TargetVpcSubnetId:  !Ref VPCSubnetParam      

  Route192122236:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePublic
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: Route to public campus 192.122.236.0/24 network
      DestinationCidrBlock: 192.122.236.0/24
      TargetVpcSubnetId:  !Ref VPCSubnetParam
  
  Route100:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 1
      DestinationCidrBlock: 10.0.0.0/10
      TargetVpcSubnetId: !Ref VPCSubnetParam
  
  Route1064:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 2
      DestinationCidrBlock: 10.64.0.0/12
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  Route1080:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 3
      DestinationCidrBlock: 10.80.0.0/13
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  Route1088:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 4
      DestinationCidrBlock: 10.88.0.0/14
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  Route1088:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 4
      DestinationCidrBlock: 10.88.0.0/14
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  # Skip 10.92.0.0/15, which are Cornell AWS addresses

  Route1096:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 5
      DestinationCidrBlock: 10.96.0.0/12
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  Route10112:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 6
      DestinationCidrBlock: 10.112.0.0/12
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  Route10128:
    Type: AWS::EC2::ClientVpnRoute
    Condition: RoutePrivate
    Properties: 
      ClientVpnEndpointId: !Ref ClientVPN
      Description: 10-space routing, part 7
      DestinationCidrBlock: 10.128.0.0/9
      TargetVpcSubnetId: !Ref VPCSubnetParam  

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /demo/client-vpn
      RetentionInDays: 30
  
  LogGroupStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref LogGroup
      LogStreamName: connections
  